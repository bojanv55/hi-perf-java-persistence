/*
 * This file is generated by jOOQ.
 */
package me.vukas.jooq.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import me.vukas.jooq.db.HiPerfJavaPers;
import me.vukas.jooq.db.Indexes;
import me.vukas.jooq.db.Keys;
import me.vukas.jooq.db.tables.records.Child2jtRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Child2jt extends TableImpl<Child2jtRecord> {

    private static final long serialVersionUID = -1220994231;

    /**
     * The reference instance of <code>hi_perf_java_pers.child2jt</code>
     */
    public static final Child2jt CHILD2JT = new Child2jt();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Child2jtRecord> getRecordType() {
        return Child2jtRecord.class;
    }

    /**
     * The column <code>hi_perf_java_pers.child2jt.child2prop</code>.
     */
    public final TableField<Child2jtRecord, String> CHILD2PROP = createField("child2prop", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>hi_perf_java_pers.child2jt.id</code>.
     */
    public final TableField<Child2jtRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>hi_perf_java_pers.child2jt</code> table reference
     */
    public Child2jt() {
        this(DSL.name("child2jt"), null);
    }

    /**
     * Create an aliased <code>hi_perf_java_pers.child2jt</code> table reference
     */
    public Child2jt(String alias) {
        this(DSL.name(alias), CHILD2JT);
    }

    /**
     * Create an aliased <code>hi_perf_java_pers.child2jt</code> table reference
     */
    public Child2jt(Name alias) {
        this(alias, CHILD2JT);
    }

    private Child2jt(Name alias, Table<Child2jtRecord> aliased) {
        this(alias, aliased, null);
    }

    private Child2jt(Name alias, Table<Child2jtRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Child2jt(Table<O> child, ForeignKey<O, Child2jtRecord> key) {
        super(child, key, CHILD2JT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return HiPerfJavaPers.HI_PERF_JAVA_PERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CHILD2JT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Child2jtRecord> getPrimaryKey() {
        return Keys.KEY_CHILD2JT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Child2jtRecord>> getKeys() {
        return Arrays.<UniqueKey<Child2jtRecord>>asList(Keys.KEY_CHILD2JT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Child2jtRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<Child2jtRecord, ?>>asList(Keys.FKSF48FL156H7AYPRFQSCHBN38P);
    }

    public ParentJt parentJt() {
        return new ParentJt(this, Keys.FKSF48FL156H7AYPRFQSCHBN38P);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Child2jt as(String alias) {
        return new Child2jt(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Child2jt as(Name alias) {
        return new Child2jt(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Child2jt rename(String name) {
        return new Child2jt(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Child2jt rename(Name name) {
        return new Child2jt(name, null);
    }
}
